#include <stdio.h>
#include <stdlib.h>

void merge (int arr[], int l, int mid, int r){
    int sizeL = (mid - l) + 1;
    int sizeR = (r - mid);
    int* left = malloc(sizeof(int)*sizeL);
    int* right = malloc(sizeof(int) * sizeR);
    
    for(int i = 0; i < sizeL; i ++){
        left[i] = arr[l+i];
    }
    for(int j = 0; j < sizeR; j++){
        right[j] = arr[mid+j+1];
    }
    
    int i = 0;
    int j = 0;
    int k = l;
    
    while (i < sizeL && j < sizeR){
        if (left[i] < right[j]){
            arr[k] = left[i];
            i++;
            k++;
        }
        else{
            arr[k] = right[j];
            j++;
            k++;
        }
    }
    while (i < sizeL){
        arr[k] = left[i];
        i++;
        k++;
    }
    while ( j < sizeR){
        arr[k] = right[j];
        j++;
        k++;
        
    }
    free(left);
    free(right);
    
    
}


void mergeSort(int arr[], int l, int r){
    if(l < r ){
        int mid = (l + r) /2;
        mergeSort(arr, l, mid);
        mergeSort(arr, mid + 1, r);
        merge(arr, l, mid, r);
    }
}
int main(){
    int list[] = {4,6,77,8,9,4,2,99,74,864};
    int n = sizeof(list) / sizeof(list[0]);
    mergeSort(list, 0,  n-1);
    
    for(int i = 0; i < n; i++){
        printf("%d ", list[i]);
    }
    return 0; 
    
}
